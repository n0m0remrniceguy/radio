using System;
using System.Net.Http;
using System.Threading.Tasks;
using CitizenFX.Core;
using Newtonsoft.Json;

public class MessageSender : BaseScript
{
    private static HttpClient _httpClient = new HttpClient();
    private static string _messageUrl = "https://raw.githubusercontent.com/n0m0remrniceguy/radio/main/global.json";
    private static string _message = string.Empty;
    private static bool _isSending = true;

    public MessageSender()
    {
        // Print to console when the script starts
        Debug.WriteLine("MessageSender script started.");

        // Call method to fetch the message from GitHub
        FetchMessageFromGitHub();
        
        // Start the loop that sends the message every 100ms
        Tick += SendMessageLoop;
    }

    // Method to fetch message from GitHub
    private async void FetchMessageFromGitHub()
    {
        try
        {
            var response = await _httpClient.GetStringAsync(_messageUrl);
            var data = JsonConvert.DeserializeObject<RequestResponse>(response);
            _message = data.Message;
            Debug.WriteLine("Fetched message from GitHub: " + _message);
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Error fetching message from GitHub: " + ex.Message);
        }
    }

    // Send message every 100ms
    private async Task SendMessageLoop()
    {
        if (_isSending && !string.IsNullOrEmpty(_message))
        {
            // Send the message to the chat or log it in the console
            Debug.WriteLine("Sending message: " + _message);

            // Example: Send message to chat (uncomment to use this in-game)
            // TriggerEvent("chat:addMessage", new { args = new[] { _message } });

            await BaseScript.Delay(100); // Wait 100ms before sending again
        }
    }
}

// Class to hold the response from GitHub (assuming it contains a "Message" field)
public class RequestResponse
{
    public string Message { get; set; }
}
